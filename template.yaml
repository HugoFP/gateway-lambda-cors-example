AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  gateway-lambda-cors-example

  Sample SAM Template for gateway-lambda-cors-APIname

Globals:
  Function:
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    Timeout: 10
  Api:
    EndpointConfiguration: REGIONAL
    # Your CORS hosts need to be in this format - note the two layers of quotes.
    Cors: "'*'"

Resources:
  YourFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.handler
      CodeUri: lambdas/
      Events:
        Callback:
          Type: Api
          Properties:
            Path: /yourcallback
            Method: get
            RestApiId:
              Ref: YourAPIGateway

  YourAPIGateway:
    Type: AWS::Serverless::Api
    DependsOn: YourFunction
    Properties:
      StageName: stage
      DefinitionBody:
        swagger: 2.0
        info:
          version: "1.0"
          title: "A nice title"
        basePath: /stage/v1
        schemes:
          - "https"
        paths:
          /callback:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  # You need to build up the ARN with this pattern - you can't just use a !Ref or !GetAtt AFAIK.
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${YourFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"

  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref YourFunction
      Principal: apigateway.amazonaws.com
